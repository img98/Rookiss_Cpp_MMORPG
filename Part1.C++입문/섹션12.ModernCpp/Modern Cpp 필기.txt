[ auto ]
컴파일 단계에서 자동으로 변수 타입을 잡아준다.
형식 연역(type deduction) = template이나 auto에서 나오듯, 알아서 말이되게 맞춰주는 조커카드 (추론)
추론단계에서도 조건을 추가할 수 있다. ex) const auto / auto*

주의!) 기본 auto는 const, &(ref)를 무시한다!!
ex) int& reference = a;
	const int cst = a;
	
	auto test1 = reference;
	auto test2 = cst;
	//이 경우, test1, test2 모두 그냥 int가 된다. 앞서말했듯 const와 &를 무시하기 때문에
	위를 유지하고 싶다면, const auto, auto&라고 명시해줘야함. -> 그런데 캐스팅 할거면 auto를 쓸이유가 없지
	
그럼 모든 타입을 auto로 써도 되나?
-> No! 타이핑이 너무길어지는게 아니라면, 오히려 가독성이 떨어진다. 일반적인 경우 그냥 타입을 써주는게 좋다.
ex)map의 페어: pair<map<int,int>::iterator,bool> /사실 저기서 first와 second만 쓰기에 타입형태는 관심도 없는 경우가 많다. auto로 쓰는게 편하다.

!일단 초보적인 단계에서는, auto는 긴 타이핑을 생략할때 쓴다고 생각하자. 그중 const와 &를 조심하는건 잊지말고

[ 중괄호 초기화 {} ]
생성하는 문법의 통일을 위해 사용됨.
int a=0;
int b(0);
int c{0}; //이런식으로 {}로 초기화를 해줄수 있는것.

Knight k2 = k1;
Knight k3{ k2 }; //클래스에서도 가능

int arr[] = {1,2,3,4}; //배열에서는 이미 중괄호 초기화를 쓰고있었다.

<중괄호 초기화의 장점>
1)vector등 container와 잘 어울린다.
ex)vector<int> v3{1,2,3,4}; //생성과 동시에 push_back해준 효과

2)축소 변환 방지 
ex)int x=0;
   double y(x); //원래는 아무 의식없이 쓰던 코드도
---double y{x}; //중괄호 초기화시 깐깐하게 작동하여 에러가 뜸//int와 double은 완벽히 호환되는 타입이 아니기에 작은 손실이 날수도 있지만 그걸 방지 가능

3)보너스
Knight k4(); //이것은 함수를 호출하는 형태이다.
Knight k5{}; //이게 기본생성자 호출 - 가독성이 좋아진다 정도?

<중괄호 초기화의 단점>
Knight k6{1,2,3} //기본생성자가 아닌, initializer list를 사용하는 생성자. <-사실 그버전으로 생성자를 만들어주면됨. 그냥 생소해서 문제
->단, 비슷한 형태의 생성자가 있다고해도 무조건 initializer list버전이 호출됨

! 괄호 초기화() 옹호: 전통적(거부감 없음), vector등 특이 케이스에만 {}사용
  중괄호 초기화() 옹호: 초기화문법의 일치화, 축소변환 방지
  
[ nullptr ]
없는 포인터를 표시할때, 기존에는 0이나 NULL을 사용했다.(실제로도 nullptr을 타고가면 0이 있긴하다)(NULL도 0인데 너무 정수같으니 형태만 바꾼것 typedef)
그러나 이 경우, NULL이 함수의 인자로 사용되면 포인터가 아닌 정수로 인식된다.
->0(없음)이지만 확실히 포인터라고 강조할게 필요-> nullptr

장점>
1)오동작 방지
2)가독성

[ using ] typedef대신 사용하는 문법
using과 typedef의 차이점

typedef int id;
using id2 = int; //둘의 순서가 다르다.

1)직관성
typedef void (*MyFunc) ();
using MyFunc2 = void(*)(); //myfunc2는 void*라는걸 한눈에 알 수 있다.

2)템플릿 사용가능
typedef의 경우 템플릿을 사용해 여러 형태를 만들수는 없다.
-> using은 가능
ex) template<typename T>
	using List = std::list<T>;
	
	typedef std::vector<T> List2; <-허용안됨
	전에는 쓰고싶으면 struct를 만들어 그안에 typedef를 호출했다. 번거로움
	아무튼 이런구조이기에 예전코드에선 ::을 많이 사용했음

[ enum class ]
enum: 열거자, 범위가 없기에(unscoped) 이름의 특징(PT_)을 붙여 사용했음.(안그러면 다른 enum에는 같은 이름 사용못함)
enum PlayerType
{
	PT_Knight,
	PT_Archer,
	PT_mage
};

enum class: 이름공간 관리(scoped), 암묵적인 변환 금지
enum class ObjectType
{
	Player,
	Monster,
	Projectile
};
사용시, 암묵적인 변환이 안되기에
double value = ObjectType::Player; 로 하면, 알아서 변환되지 않고 에러발생
double value =static_cast<double>ObjectType::Player; 캐스팅으로 명시해줘야하며, 이름공간도 밝혀야함
=>이름공간관리로 편하고 컴파일에러로 깐깐하게 검사할수 있지만, 번거롭긴하다.

[ delete (삭제된 함수) ]
class를 만든다고 할때, 기능을 우리가 만들지 않아도 자동으로 컴파일러가 만드는 기능들이 있다. (기본생성자,복사연산자 같은것)
=>이것을 사용하지 못하게 하고싶을때, 해당 함수를 delete 삭제해버리면 된다.
(예전에는 private로 비공개 시켜서 해당 기능을 비슷하게 사용했다.)

사용법 : void AddHP() = delete; 
삭제할 함수 뒤에 = delete를 붙이면 된다.

[ override, final ]
override: 기능의 재정의 //overload: 함수'이름'의 재사용, 버전2를 만드는것. 헷갈리지말자
상속관계에서 자신의 타입에 맞는 함수를 호출하기 위해 virtual(가상함수)을 사용했다. //RTTI 참조
//부모에서 virtual을 붙인다면, 자식들은 virtual을 붙이지않아도 해당함수가 가상함수라는것을 알수있다.(그러나 가독성을 위해 그냥 붙이자)
그러나 virtual을 계속 붙여가면, 어디서 최초로 virtual을 붙였는지 알기힘들다.
->그래서 상속받아 사용한다는 표시를 위해 override를 붙인다.(일종의 안전장치:만약 부모에 해당 함수가 없다면 에러 뜸)
사용법: virtual void Attack() override
	{
	}
//필수라기보다는 안전장치라 있으면 좋다. 습관 들이자.

final: 부모의 함수를 override하고있다 + 더이상 내 자손은 override하지말라는 표시

[ 오른값(rvalue) 참조와 std::move ] C++11의 핵심적 변화
<왼값(lvalue) vs 오른값(rvalue)>
-lvalue: 단일식을 넘어서 계속 지속되는 개체
-rvalue: lvalue가 아닌 나머지(임시 값, 열거형, 람다, i++ 등)
int a=3; //a=lvalue, 3=rvalue //대부분 왼쪽에 있는 값이 lvalue, 오른쪽이 rvalue이긴하지만 다 그런건 아니다.

만약 Knight를 복사하는 함수가 있다 생각해보자.
Copy방식을 복사연산자로 원본그대로를 복사해서 넘겨주면, 객체가 클때 부담이 된다는 단점이 있다.
KnightCopy(Knight k) {};
그래서 사용했던게 왼값참조로, 함수를 만들때 참조(주소)를 넘겨 불필요한 복사를 수행하지 않았다.
KnightCopyLvalue(Knight& k) {};
그러나 k1이 있는게 아닌, 임시객체를 인자로 만들어 쓰고싶다면?
k1 = KnightCopyLvalue(Knight());
=>에러가 발생한다. 왜나면 'Knight()'가 해당 줄이 수행된 후에는 사라지는 임시값(rvalue)이기때문

모던C++에 들면서 임시값을 받을수있는 참조 방식이 생겨났다. =오른값 참조
KnightCopyRvalue(Knight&& k){}; //&& 표시를 통해 오른값참조를 사용한다고 표시
->일반적으로 lvalue를 받을수없고, 임시값인 rvalue를 받을수 있게됬다.
사용시, k1 = KnightCopyRvalue(static_cast<Knight&&> k); //rvalue만 쓸수있기에 강제로 캐스팅
//쓰기 번거로우니 나중가면 std::move라는게 나온다.

어셈블리를 까보면, 임시값도 결국 사용하는 당시에는 스택메모리에 오르기때문에, 이때 그 주소를 참조하여 함수를 작동
즉, 어셈블리상에서 보면 왼값참조도 오른값참조도 원본자체를 참조하는것은 똑같다.(오른값은 임시니까 원본수정이 의미가 없을뿐)
다 원본을 참조하는거면 왜쓰냐?
어셈블리로는 같지만 C++에서는 다르다.
왼값참조는 원본에 맘대로 접근해도 된다는 의미이고, 오른값참조는 원본을 유지할 생각없으니 맘대로 접근해도 된다는뜻 (뉘앙스가 조금 다름)

원본을 유지하지 않는다면?
얕은복사로도 '원본'의 내용물을 수정하거나 가져다 사용할수있다. //복사가 아니라 이동이기에 부담적다.
void operator=(Knight&& k)
{
	_pet = k._pet;
	k._pet = nullptr;
}
//얕은복사: 있는그대로 복사(포인터값 또한 그대로) / 깊은복사: 독립적인 객체를 만들어 복사(대신 복사부담이 상승)
!오른값참조는 결국 원본을 날려도 된다는 의미표시가 주목적

k2 = static_cast<Knight&&>(k1); //lvalue를 오른값참조할것이기에 cast필요
그런데 문법이 복잡하니 출현한게 std::move
k2 = std::move(k1); //오른값 참조로 캐스팅했다 라는뜻.

!원본을 유지할 필요가 없는 경우가 많진 않지만, 굉장히 효과가 좋기에 알아둬야좋다.
!!속도의 강점뿐 아니라, 소유권을 뺏어온다는 개념도 은근 유용하다.

[ 전달 참조 ] forwarding reference
보편참조(univeral ref)->전달참조(forwarding ref) 이름바뀜//C++17
&을두번(&&)쓰면 오른값참조라 배웠는데,
그러나 template같이 연역추론이 들어가면 lvalue형태로도 rvalue함수를 사용할수있게된다. //타입을 알아서
template<typename T> void Test(T&& param){};
Test(k1); //k1이 왼값참조로 전달됨
Test(std::move(k1)); //k1이 오른값참조로 전달됨. 그러나 k1과 move(k1)의 타입을 다르게 인식한다.
이것은 전달참조라고 한다.

!전달참조: 형식연역(type deduction)이 일어날때, 같은함수일지라도 다른방식으로 참조하게 만든다.
!!왼값형태를 넣으면 왼값참조로, 오른값형태로 넣으면 오른값참조로 작동함.
//그러나 template가 붙을지라도 const나 다른 요소들이 붙으면 전달참조로 동작하지 않음. 순수한 T&&만 가능

그럼 이걸 왜쓰냐?
매번 왼값,오른값 형태로 여러번 함수를 만들수 없기에, 그리고 template의 T도 개수가 늘어나면 2*T배로 함수가 늘어남
so 귀찮으니까 사용하는것임.

특이사항) 오른값 참조를 했다고 해서, 그녀석도 오른값 참조가 가능한 것은 아님.
당연해보이지만 코드로 보면 헷갈릴수있다.
Knight&& k2 = std::move(k1); //이때,k2는 Knight&&타입이지만 오른값은 아니다.

template를 사용할때 위에 관련한 실수가 발생하기 쉽다.

그렇다면 함수내에서 왼값참조가 들어오면 해당유형에 맞는코드를(원본을 버리면 안되니), 오른값참조가 들어오면 해당하는 코드를 어떻게 짜야할까
std::forward를 사용한다.
template<typenameT>
void Test_ForwardingRef(T&& param)
{
	Test_Copy(std::forward<T>(param)); //std::forward를 통해, 왼값참조가 들어오면 복사, 오른값참조가 들어오면 이동으로 작동함.
										//즉, 타입에 맞게 알아서 잘해줌. 
}

!전달참조 와 std::forward를 세트로 알아두자. 추론시 알아서 상황에 맞게 맞춰주는 문법.